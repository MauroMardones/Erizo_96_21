#if !defined(_PBRmodbento_)
#  define _PBRmodbento_

class model_data : public ad_comm{
  data_number M;
  data_number h;
  data_number dt;
  data_int npbr;
  data_vector ratio;
  data_int nedades;
  data_vector Msex;
  data_vector Wm;
  data_int nyrs;
  data_matrix Sel;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  dvariable adromb(dvariable(model_parameters::*f)(const dvariable&), double a, double b, int ns)
  {
    using namespace std::placeholders;
    _func func = std::bind(f, this, _1);
    return function_minimizer::adromb(func, a, b, ns);
  }
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_vector log_Frms;
  param_init_matrix log_Fspr;
  param_vector N;
  param_vector Fcr;
  param_vector Z;
  param_vector F;
  param_vector S;
  param_vector C;
  param_vector BD;
  param_vector Y;
  param_vector BDLP;
  param_vector YLP;
  param_vector RLP;
  param_vector ratio_pbr;
  param_number aux;
  param_number MRS;
  param_number Bmrs;
  param_number Fmrs;
  param_number Bo;
  param_vector No;
  param_number BDo;
  param_number alfa;
  param_number beta;
  param_number BPR;
  param_number YPR;
  param_vector BPRLP;
  param_vector Yopt;
  param_number BPR2;
  param_number BPRLP2;
  param_number penalty;
  param_number dy01;
  param_number F01;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);

};
#endif
